{"version":3,"sources":["components/SharedComponents/ColorModeSwitcher.js","Images/logo.svg","components/SharedComponents/Logo.js","components/SharedComponents/Nav.js","components/SharedComponents/Footer.js","components/Home/Form.js","components/SharedComponents/BorderBox.js","components/Home/Banner.js","components/Hooks/useGeoLocation.js","components/MyMap.js","components/Home/Home.js","theme.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","marginLeft","onClick","icon","spin","keyframes","Logo","animation","usePrefersReducedMotion","undefined","as","FcGlobe","boxSize","src","logo","Nav","p","bgGradient","borderRadius","boxShadow","justify","direction","align","justifySelf","spacing","to","fontWeight","Footer","h","FaHeart","onSubmit","values","ms","Promise","resolve","setTimeout","then","window","alert","JSON","stringify","initialValues","lowerValue","upperValue","lifeExpectancy","firstName","lastName","age","employed","favoriteColor","toppings","employedd","select","ageGroup","foo","bar","validationSchema","Yup","required","min","moreThan","equals","Form","onClose","colorMode","ColorChoose","e","handleSubmit","errors","borderWidth","rounded","borderColor","mt","px","name","label","my","bg","mx","selectProps","placeholder","value","marginY","BorderBox","children","border","py","Banner","useGeoLocation","useState","loaded","coordinates","lat","lng","location","setLocation","onSuccess","coords","latitude","longitude","onError","error","code","message","useEffect","navigator","geolocation","getCurrentPosition","MyMap","userLocation","position","Number","MapContainer","center","zoom","scrollWheelZoom","height","GeoJSON","attribution","data","counties","LayersControl","BaseLayer","checked","TileLayer","url","Marker","Popup","Home","useDisclosure","isOpen","onOpen","maxW","theme","extendTheme","fonts","heading","body","colors","g_start","g_end","App","basename","process","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.105c2fac.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","export default __webpack_public_path__ + \"static/media/logo.034ef726.svg\";","import React from 'react';\nimport { Icon, keyframes, usePrefersReducedMotion } from '@chakra-ui/react';\nimport logo from 'Images/logo.svg';\nimport { FcGlobe } from 'react-icons/fc';\n\nconst spin = keyframes`\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n`;\n\nexport const Logo = props => {\n  const prefersReducedMotion = usePrefersReducedMotion();\n\n  const animation = prefersReducedMotion\n    ? undefined\n    : `${spin} infinite 20s linear`;\n\n  return <Icon as={FcGlobe} boxSize={10} animation={animation} src={logo} {...props} />;\n};\n","import React from 'react';\nimport {\n  Box,\n  Text,\n  HStack,\n  Flex,\n} from '@chakra-ui/react';\nimport { Link } from 'react-router-dom';\nimport { ColorModeSwitcher } from 'components/SharedComponents/ColorModeSwitcher';\nimport { Logo } from 'components/SharedComponents/Logo' \n\nconst Nav = () => {\n  const gradient = 'repeating-linear(to-l, g_start, g_end)';\n  return (\n    <>\n      <Box p={3} bgGradient={gradient} borderRadius=\"0\" boxShadow=\"dark-lg\">\n        <Flex\n          justify=\"space-between\"\n          direction=\"horizontal\"\n          align=\"center\"\n          color=\"white\"\n        >\n          {/* probably put the color switch here */}\n          {/* Add icon */}\n          <Box>\n            <ColorModeSwitcher justifySelf=\"flex-start\" />\n          </Box>\n          <HStack spacing=\"10px\">\n            <Box>\n              <Link to=\"/\">\n                <Text fontSize=\"xl\" fontWeight=\"bold\">\n                  mapM\n                </Text>\n              </Link>\n            </Box>\n            <Box>\n                <Logo />\n            </Box>\n          </HStack>\n          <Box></Box>\n          {/* <Link><ListItem>About</ListItem></Link> */}\n        </Flex>\n      </Box>\n    </>\n  );\n};\n\nexport default Nav;\n","import React from 'react';\nimport { Box, Text, Center, Flex, Icon } from '@chakra-ui/react';\nimport { FaHeart } from 'react-icons/fa'\n\nconst Footer = () => {\n  const gradient = 'repeating-linear(to-l, g_start, g_end)';\n  return (\n    <>\n      <Box h=\"5rem\" p={5} bgGradient={gradient}>\n          <Center>\n          <Flex justify=\"center\" direction=\"column\" >\n                <Text color=\"white\">Made with <Icon color=\"red\" as={FaHeart} /></Text>\n                <Text color=\"white\"> by Srirag Vuppala and Shehbaj Dhillon </Text>\n          </Flex>\n          </Center>\n      </Box>\n    </>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport {\n  Tag,\n  Box,\n  Text,\n  Stack,\n  HStack,\n  Radio,\n  ButtonGroup,\n  Center,\n  useColorMode,\n} from '@chakra-ui/react';\nimport {\n  CheckboxContainer,\n  CheckboxControl,\n  // CheckboxSingleControl,\n  // InputControl,\n  NumberInputControl,\n  PercentComplete,\n  RadioGroupControl,\n  ResetButton,\n  SelectControl,\n  SliderControl,\n  SubmitButton,\n  SwitchControl,\n  // TextareaControl,\n} from 'formik-chakra-ui';\n// import { CheckIcon, CloseIcon } from '@chakra-ui/icons';\n// import BorderBox from 'components/SharedComponents/BorderBox';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\n\n// Yup validations\n// const validateRange = Yup.object().shape({\n//   lowervalue: Yup.number(),\n//   // upperValue: Yup.number().when('lowerValue', (lowerValue, schema) => {\n//   //     return schema.test({\n//   //       test: upperValue=> !!lowerValue&& upperValue> lowerValue,\n//   //       message: \"Max should be > min\"\n//   //     })\n//   //   }),\n//   upperValue: Yup.number().moreThan(Yup.ref('lowerValue'), \"Max should be more than min\")\n//   // upperValue: Yup.number().when(\n//   //       [\"lowerValue\", \"upperValue\"],\n//   //       (lowerValue: number, upperValue: number, schema: any) => {\n//   //           return !!lowerValue&& lowerValue!==upperValue\n//   //               ? schema.moreThan(\n//   //                       lowerValue,\n//   //                       \"Max should be > min\"\n//   //                 )\n//   //               : schema;\n//   //       }\n//   // ),\n// })\n\n// const Form = () => {\n\n//   const validateIcon = e => {\n//     if (e === true) {\n//       return <CheckIcon color=\"green.500\" />;\n//     }\n//     if (e === false) {\n//       return <CloseIcon color=\"red.500\" />;\n//     }\n//   };\n\n//   return (\n//     <>\n//       <BorderBox m={15}>\n//         <Heading>Filters</Heading>\n//         <Divider /\n//         <Grid>\n//           {/* Real Estate prices */}\n//           <Text>Range of Real Estate Prices</Text>\n//           <Formik\n//             initialValues={{ lowerValue: 0, upperValue: 0}}\n//             validationSchema={validateRange}\n//             onSubmit={(values, actions) => {\n//               setTimeout(() => {\n//                 alert(JSON.stringify(values, null, 2));\n//                 actions.setSubmitting(false);\n//               }, 1000);\n//             }}\n//           >\n//             {(props) => (\n//               // <FormikForm>\n//                 <Stack\n//                   px={5}\n//                   py={5}\n//                   direction={['column', 'column', 'row', 'row']}\n//                   align=\"center\"\n//                 >\n//                   <Field lowerValue=\"lowerValue\" >\n//                     {({ field, form }) => (\n//                       <FormControl\n//                         isInvalid={form.errors.name && form.touched.name}\n//                       >\n//                         {/* <FormLabel htmlFor=\"lowerValue\"></FormLabel> */}\n//                         <InputGroup>\n//                           <InputLeftElement\n//                             pointerEvents=\"none\"\n//                             color=\"gray.300\"\n//                             fontSize=\"1.2em\"\n//                             children=\"$\"\n//                           />\n//                           <Input {...field} onChange={props.handleChange} id=\"lowerValue\" value={props.lowerValue} placeholder=\"Lower Limit\" />\n//                           {/* <InputRightElement children={validateIcon(false)} /> */}\n//                           <FormErrorMessage>{form.errors.lowerValue}</FormErrorMessage>\n//                         </InputGroup>\n//                       </FormControl>\n//                     )}\n//                   </Field>\n\n//                   <Text> to </Text>\n\n//                   <Field upperValue=\"upperValue\" >\n//                     {({ field, form }) => (\n//                       <FormControl\n//                         isInvalid={form.errors.name && form.touched.name}\n//                       >\n//                         {/* <FormLabel htmlFor=\"lowerValue\"></FormLabel> */}\n//                         <InputGroup>\n//                           <InputLeftElement\n//                             pointerEvents=\"none\"\n//                             color=\"gray.300\"\n//                             fontSize=\"1.2em\"\n//                             children=\"$\"\n//                           />\n//                           <Input {...field} onChange={props.handleChange} id=\"upperValue\" value={props.upperValue} placeholder=\"Upper Limit\" />\n//                           {/* <InputRightElement children={validateIcon(true)} /> */}\n//                           <FormErrorMessage>{form.errors.upperValue}</FormErrorMessage>\n//                         </InputGroup>\n//                       </FormControl>\n//                     )}\n//                     </Box>\n//                   {/* </Field> */}\n//                 </Stack>\n//               // </FormikForm>\n//             )}\n//           </Formik>\n\n//             <Text>Median Wage</Text>\n//             <Text>Life Expectancy</Text>\n//             <Text>Covid Section</Text>\n//             <Text>Vaccinations</Text>\n//             <Text>Infections</Text>\n//         </Grid>\n//       </BorderBox>\n//     </>\n//   );\n// };\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst onSubmit = values => {\n\n  sleep(300).then(() => {\n    window.alert(JSON.stringify(values, null, 2));\n  });\n};\n\nconst initialValues = {\n  lowerValue: 0,\n  upperValue: 1,\n  lifeExpectancy: false,\n  firstName: '',\n  lastName: '',\n  age: 0,\n  employed: false,\n  favoriteColor: '',\n  toppings: ['tuna'],\n  employedd: false,\n  select: '',\n  ageGroup: '',\n  foo: 23,\n  bar: '',\n};\nconst validationSchema = Yup.object({\n  lowerValue: Yup.number().required().min(0),\n  upperValue: Yup.number().moreThan(\n    Yup.ref('lowerValue'),\n    'Upper Limit must be bigger than Lower Limit'\n  ),\n  lifeExpectancy: Yup.boolean(),\n  firstName: Yup.string(),\n  lastName: Yup.string(),\n  age: Yup.number().min(18),\n  employed: Yup.boolean().equals([true]),\n  favoriteColor: Yup.string(),\n  toppings: Yup.array().min(1),\n  employedd: Yup.boolean().equals([true]),\n  select: Yup.string(),\n  ageGroup: Yup.string(),\n  foo: Yup.number(),\n  bar: Yup.string(),\n});\n\nconst Form = ({onClose}) => {\n  const { colorMode, toggleColorMode } = useColorMode();\n  function ColorChoose() {\n    if (colorMode === 'light') {\n      return 'g_start';\n    } else {\n      return 'g_end';\n    }\n  }\n\n  const riskColor = e => {\n    if (e <= 33) {\n      return 'green.300';\n    } else if (33 < e && e < 66) {\n      return 'yellow.300';\n    } else {\n      return 'red.400';\n    }\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      // onSubmit={(e) => onClose}\n      validationSchema={validationSchema}\n    >\n      {({ handleSubmit, values, errors }) => (\n        <Box\n          borderWidth=\"1px\"\n          rounded=\"lg\"\n          // boxShadow=\"dark-lg\"\n          borderColor={ColorChoose}\n          p={5}\n          // mx={6}\n          as=\"form\"\n          onSubmit={handleSubmit}\n        >\n          {/* <Heading align=\"center\">Filters</Heading> */}\n          {/* <Divider /> */}\n          <Text mt={4}> Real Estate Prices</Text>\n          <Stack px={5} direction={['column', 'row', 'row']} align=\"center\">\n            <NumberInputControl name=\"lowerValue\" label=\"Lower Limit ($)\" />\n            <Text> to </Text>\n            <NumberInputControl name=\"upperValue\" label=\"Upper Limit ($)\" />\n          </Stack>\n\n          <Box my={5}>\n            <HStack my={2}>\n              <Text>How much risk are you willing to take?*</Text>\n              <Tag bg={riskColor(values.foo)}>\n                <Text fontWeight=\"bold\">{values.foo} %</Text>{' '}\n              </Tag>\n            </HStack>\n            <HStack mx={5}>\n              <Text color=\"green\">0%</Text>\n              <SliderControl name=\"foo\" />\n              <Text color=\"red\">100%</Text>\n            </HStack>\n          </Box>\n\n          <Box my={5}>\n            <Text>What is the income level you want to be in?</Text>\n            <SelectControl\n              name=\"select\"\n              px={5}\n              selectProps={{ placeholder: 'Select option' }}\n            >\n              <option value=\"option1\">less than $30,000</option>\n              <option value=\"option2\">$30,000 - $60,000</option>\n              <option value=\"option3\">$60,000 - $90,000</option>\n              <option value=\"option4\">$90,000 - $120,000</option>\n              <option value=\"option5\">more than $120,000 </option>\n            </SelectControl>\n          </Box>\n\n          <Box my={5}>\n            <Text>What age group do you want to live in?</Text>\n            <SelectControl\n              name=\"ageGroup\"\n              px={5}\n              selectProps={{ placeholder: 'Select option' }}\n            >\n              <option value=\"option1\">20 - 30 years</option>\n              <option value=\"option2\">30 - 50 years</option>\n              <option value=\"option3\">more than 50 years</option>\n            </SelectControl>\n          </Box>\n\n          <Box my={5}>\n            <SwitchControl\n              name=\"lifeExpectancy\"\n              label=\"Consider Life Expectancy?\"\n            />\n            {/* <CheckboxSingleControl\n              name=\"lifeExpectancy\"\n              label=\"Consider Life Expectancy?\"\n            /> */}\n          </Box>\n\n          <RadioGroupControl name=\"favoriteColor\" label=\"Vaccinations\">\n            <Radio value=\"#ff0000\">Red</Radio>\n            <Radio value=\"#00ff00\">Green</Radio>\n            <Radio value=\"#0000ff\">Blue</Radio>\n          </RadioGroupControl>\n          <CheckboxContainer name=\"toppings\" label=\"Toppings\">\n            <CheckboxControl name=\"toppings\" value=\"chicken\">\n              Chicken\n            </CheckboxControl>\n            <CheckboxControl name=\"toppings\" value=\"ham\">\n              Ham\n            </CheckboxControl>\n            <CheckboxControl name=\"toppings\" value=\"mushrooms\">\n              Mushrooms\n            </CheckboxControl>\n            <CheckboxControl name=\"toppings\" value=\"cheese\">\n              Cheese\n            </CheckboxControl>\n            <CheckboxControl name=\"toppings\" value=\"tuna\">\n              Tuna\n            </CheckboxControl>\n            <CheckboxControl name=\"toppings\" value=\"pineapple\">\n              Pineapple\n            </CheckboxControl>\n          </CheckboxContainer>\n\n          <PercentComplete />\n          <Center>\n\n          <ButtonGroup>\n            <SubmitButton bg=\"g_start\" onClick={onClose}>Submit</SubmitButton>\n            <ResetButton>Reset</ResetButton>\n          </ButtonGroup>\n          </Center>\n\n          <Box as=\"pre\" marginY={10}>\n            {JSON.stringify(values, null, 2)}\n            <br />\n            {JSON.stringify(errors, null, 2)}\n          </Box>\n        </Box>\n      )}\n    </Formik>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\nimport { Box, useColorMode } from \"@chakra-ui/react\";\n\nconst BorderBox = ({ children }) => {\n  const { colorMode, toggleColorMode } = useColorMode();\n  function ColorChoose() {\n    if (colorMode === \"light\") {\n      return \"g_start\";\n    } else {\n      return \"g_end\";\n    }\n  }\n  return (\n    <>\n      <Box\n        border=\"2px\"\n        my= {4}\n        mx= {4}\n        borderRadius=\"12px\"\n        px={[3, null, 6]}\n        py={[3, null, 6]}\n        borderColor={ColorChoose}\n        boxShadow=\"inner\"\n      >\n        {children}\n      </Box>\n    </>\n  );\n};\n\nexport default BorderBox;","import React from 'react'\nimport { Box, Heading, Divider, Text } from '@chakra-ui/react'\nimport BorderBox from 'components/SharedComponents/BorderBox'\n\nconst Banner = () => {\n    return (\n        <>\n        <Box p={5} align=\"center\">\n            <BorderBox>\n                <Heading >Hello! Welcome to mapM</Heading>\n                <Divider />\n                <Text>Your one stop shop to find the best location to live in with your requirements</Text>\n            </BorderBox>\n        </Box>\n        </>\n    )\n}\n\nexport default Banner\n","import React, { useState, useEffect } from \"react\";\n\nconst useGeoLocation = () => {\n    const [location, setLocation] = useState({\n        loaded: false,\n        coordinates: { lat: \"\", lng: \"\" },\n    });\n\n    const onSuccess = (location) => {\n        setLocation({\n            loaded: true,\n            coordinates: {\n                lat: location.coords.latitude,\n                lng: location.coords.longitude,\n            },\n        });\n    };\n\n    const onError = (error) => {\n        setLocation({\n            loaded: true,\n            error: {\n                code: error.code,\n                message: error.message,\n            },\n        });\n    };\n\n    useEffect(() => {\n        if (!(\"geolocation\" in navigator)) {\n            onError({\n                code: 0,\n                message: \"Geolocation not supported\",\n            });\n        }\n        // navigator.geolocation.getCurrentPosition(onSuccess, onError, {enableHighAccuracy: true, maximumAge: 10000});\n        navigator.geolocation.getCurrentPosition(onSuccess, onError);\n    }, []);\n\n    return location;\n};\n\nexport default useGeoLocation;","import React, { useState, useEffect } from 'react';\nimport {\n  MapContainer,\n  TileLayer,\n  Marker,\n  GeoJSON,\n  Popup,\n  LayersControl,\n} from 'react-leaflet';\nimport { Spinner, Box, useColorMode } from '@chakra-ui/react';\nimport BorderBox from 'components/SharedComponents/BorderBox';\nimport 'components/myLeaflet.css';\nimport useGeoLocation from 'components/Hooks/useGeoLocation';\n// import geodata from '../data/us-county-boundaries.geojson'\n// import counties from '../data/counties.geojson';\nimport counties from '../data/counties.json';\nimport L from 'leaflet';\n\nfunction MyMap() {\n  const userLocation = useGeoLocation();\n  const position = [\n    Number(userLocation.coordinates['lat']),\n    Number(userLocation.coordinates['lng']),\n  ];\n\n  const { colorMode, toggleColorMode } = useColorMode();\n  return (\n    <Box>\n      {/* {counties.length === 0 ? ( <Spinner/> ) */}\n      {/* : (  */}\n      <BorderBox>\n        <MapContainer\n          center={[33.9, -118.39]}\n          zoom={13}\n          scrollWheelZoom={true}\n          height={300}\n        >\n          <GeoJSON attribution=\"county data\" data={counties} />\n          <LayersControl position=\"topright\">\n            <LayersControl.BaseLayer checked name=\"OpenStreetMap.Mapnik\">\n              <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n              />\n            </LayersControl.BaseLayer>\n            <LayersControl.BaseLayer name=\"OpenStreetMap.BlackAndWhite\">\n              <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\"\n              />\n            </LayersControl.BaseLayer>\n            <LayersControl.BaseLayer name=\"Stadia Maps\">\n              <TileLayer\n                attribution='&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a> contributors'\n                url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n              />\n            </LayersControl.BaseLayer>\n\n            {/* {colorMode === 'light' ? (\n              <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n              />\n            ) : (\n              <TileLayer\n                attribution='&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a> contributors'\n                url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n              />\n            )} */}\n\n            {/* <Marker position={getUserLocation}> */}\n            <Marker position={position}>\n              <Popup>Where you are right now!</Popup>\n            </Marker>\n          </LayersControl>\n        </MapContainer>\n      </BorderBox>\n      {/* )} */}\n    </Box>\n  );\n}\n\nexport default MyMap;\n\n// function getUserLocation() {\n//   // if (userLocation !== undefined || JSON.stringify(userLocation) !== '{}') {\n//   let position = [0, 0];\n//   // if (userLocation.loaded === true && userLocation.coordinates !== null) {\n//   if (JSON.stringify(userLocation) !== '{}') {\n//       position = [Number(userLocation.coordinates['lat']), Number(userLocation.coordinates['lng'])];\n//       // position[1] = Number(userLocation.coordinates['lng']);\n//   }\n//   else {\n//     position = [51.505, -0.09];\n//   }\n//   return position;\n// }\n","import React, { useState } from 'react';\nimport { Heading, Box, Button, Center, useDisclosure } from '@chakra-ui/react';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n} from \"@chakra-ui/react\"\nimport Form from 'components/Home/Form';\nimport Banner from 'components/Home/Banner';\nimport MyMap from 'components/MyMap';\n\nconst Home = () => {\n  const {isOpen, onOpen, onClose} = useDisclosure()\n\n  return (\n    <>\n      <Box>\n      <Banner />\n      <Center>\n        <Button bg=\"g_start\" align=\"center\" color=\"white\" onClick={onOpen}>\n          Let's  start the magic\n        </Button>\n        <Modal isOpen={isOpen} onClose={onClose}>\n          <ModalOverlay />\n          <ModalContent maxW=\"50rem\">\n            <ModalHeader>\n              <Heading align=\"center\">Filters</Heading>\n              </ModalHeader>\n            <ModalCloseButton />\n            <ModalBody>\n            <Form onClose={onClose} />\n            </ModalBody>\n          </ModalContent>\n          <ModalFooter>\n            hi\n          </ModalFooter>\n        </Modal>\n      </Center>\n      <MyMap />\n      </Box>\n    </>\n  );\n};\n\nexport default Home;\n","import { extendTheme } from \"@chakra-ui/react\"\n\nconst theme = extendTheme({\n  fonts: {\n    heading: \"Open Sans\",\n    body: \"Raleway\",\n  },\n  colors: {\n      g_start: \"#0bab64\",\n      g_end: \"#3bb78f\"\n  }\n})\n\nexport default theme","import React from 'react';\nimport {\n  ChakraProvider,\n  Box,\n} from '@chakra-ui/react';\nimport Nav  from 'components/SharedComponents/Nav.js';\nimport Footer from 'components/SharedComponents/Footer.js';\nimport Home from 'components/Home/Home';\nimport { BrowserRouter as Router, Switch, Route, } from 'react-router-dom'\n\nimport theme from './theme.js'\nimport \"@fontsource/raleway/400.css\"\nimport \"@fontsource/open-sans/700.css\"\n\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      {/* <head><link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.2.0/dist/leaflet.css\" />\n<script src=\"https://unpkg.com/leaflet@1.2.0/dist/leaflet.js\"></script></head> */}\n      <Router basename={process.env.PUBLIC_URL}>\n        <Box>\n        <Nav />\n        <Switch>\n          {/* <Route exact path=\"/featured\" component={Featured} /> */}\n          {/* <Route exact path=\"/about\" component={About} /> */}\n          <Route exact path=\"/\" component={Home} />\n        </Switch>\n        <Footer />\n        </Box>\n      </Router>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n\n  //  {/* <Box textAlign=\"center\" fontSize=\"xl\">\n  //       <Grid minH=\"100vh\" p={3}>\n  //         <ColorModeSwitcher justifySelf=\"flex-end\" />\n  //         <VStack spacing={8}>\n  //           <Logo h=\"40vmin\" pointerEvents=\"none\" />\n  //           <Text>\n  //             Edit <Code fontSize=\"xl\">src/App.js</Code> and save to reload.\n  //           </Text>\n  //           <Link\n  //             color=\"teal.500\"\n  //             href=\"https://chakra-ui.com\"\n  //             fontSize=\"2xl\"\n  //             target=\"_blank\"\n  //             rel=\"noopener noreferrer\"\n  //           >\n  //             Learn Chakra\n  //           </Link>\n  //         </VStack>\n  //       </Grid>\n  //     </Box> */}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}