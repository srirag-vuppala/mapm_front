{"version":3,"sources":["components/SharedComponents/ColorModeSwitcher.js","Images/logo.svg","components/SharedComponents/Logo.js","components/SharedComponents/Nav.js","components/SharedComponents/Footer.js","components/Home/Form.js","components/SharedComponents/BorderBox.js","components/Home/Banner.js","components/Hooks/useGeoLocation.js","components/Map/popupStyles.js","components/Map/MyMapState.js","components/Map/MyMapCounty.js","components/Home/Home.js","theme.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","marginLeft","onClick","icon","spin","keyframes","Logo","animation","usePrefersReducedMotion","undefined","as","FcGlobe","boxSize","src","logo","Nav","p","bgGradient","borderRadius","boxShadow","justify","direction","align","justifySelf","spacing","to","fontWeight","Footer","h","FaHeart","initialValues","lowerValue","upperValue","stateCounty","risk","bar","validationSchema","Yup","required","min","moreThan","Form","onClose","onSubmit","colorMode","ColorChoose","e","handleSubmit","values","errors","borderWidth","rounded","borderColor","mt","px","name","label","my","bg","mx","marginY","JSON","stringify","BorderBox","children","border","py","Banner","useGeoLocation","useState","loaded","coordinates","lat","lng","location","setLocation","onSuccess","coords","latitude","longitude","onError","error","code","message","useEffect","navigator","geolocation","getCurrentPosition","popupContent","textAlign","height","marginTop","popupHead","popupText","marginBottom","okText","MyMapState","userLocation","position","Number","MapContainer","center","zoom","scrollWheelZoom","GeoJSON","attribution","data","states","onEachFeature","state","layer","properties","NAME","confirmedText","LSAD","bindPopup","addTo","LayersControl","BaseLayer","checked","TileLayer","url","Marker","Popup","points","map","point","states_loc","className","style","toPrecision","Math","random","MyMapCounty","onEachCounty","county","counties","console","log","Home","useDisclosure","isOpen","onOpen","sleep","ms","Promise","resolve","setTimeout","formData","setFormData","setPoints","ready","setReady","type_d","lower","upper","axios","get","then","res","statuscode","catch","response","makeAPIMagicCall","onSubmit_Form","a","setStatus","resetForm","m","maxW","theme","extendTheme","fonts","heading","body","colors","g_start","g_end","App","basename","process","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.b6d7fcdf.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","export default __webpack_public_path__ + \"static/media/logo.b7d27852.svg\";","import React from 'react';\nimport { Icon, keyframes, usePrefersReducedMotion } from '@chakra-ui/react';\nimport logo from 'Images/logo.svg';\nimport { FcGlobe } from 'react-icons/fc';\n\nconst spin = keyframes`\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n`;\n\nexport const Logo = props => {\n  const prefersReducedMotion = usePrefersReducedMotion();\n\n  const animation = prefersReducedMotion\n    ? undefined\n    : `${spin} infinite 20s linear`;\n\n  return <Icon as={FcGlobe} boxSize={10} animation={animation} src={logo} {...props} />;\n};\n","import React from 'react';\nimport {\n  Box,\n  Text,\n  HStack,\n  Flex,\n} from '@chakra-ui/react';\nimport { Link } from 'react-router-dom';\nimport { ColorModeSwitcher } from 'components/SharedComponents/ColorModeSwitcher';\nimport { Logo } from 'components/SharedComponents/Logo' \n\nconst Nav = () => {\n  const gradient = 'repeating-linear(to-l, g_start, g_end)';\n  return (\n    <>\n      <Box p={3} bgGradient={gradient} borderRadius=\"0\" boxShadow=\"dark-lg\">\n        <Flex\n          justify=\"space-between\"\n          direction=\"horizontal\"\n          align=\"center\"\n          color=\"white\"\n        >\n          {/* probably put the color switch here */}\n          {/* Add icon */}\n          <Box>\n            <ColorModeSwitcher justifySelf=\"flex-start\" />\n          </Box>\n          <HStack spacing=\"10px\">\n            <Box>\n              <Link to=\"/\">\n                <Text fontSize=\"xl\" fontWeight=\"bold\">\n                  mapM\n                </Text>\n              </Link>\n            </Box>\n            <Box>\n                <Logo />\n            </Box>\n          </HStack>\n          <Box></Box>\n          {/* <Link><ListItem>About</ListItem></Link> */}\n        </Flex>\n      </Box>\n    </>\n  );\n};\n\nexport default Nav;\n","import React from 'react';\nimport { Box, Text, Center, Flex, Icon } from '@chakra-ui/react';\nimport { FaHeart } from 'react-icons/fa'\n\nconst Footer = () => {\n  const gradient = 'repeating-linear(to-l, g_start, g_end)';\n  return (\n    <>\n      <Box h=\"7rem\" p={5} bgGradient={gradient} >\n          <Center>\n          <Flex justify=\"center\" direction=\"column\" >\n                <Text color=\"white\">Made with <Icon color=\"red\" as={FaHeart} /></Text>\n                <Text color=\"white\"> by Srirag Vuppala and Shehbaj Dhillon </Text>\n                <Text color=\"white\">*The risk calculation is based off of an self-made algorithm using Life Expectancy, COVID 19, etc. </Text>\n          </Flex>\n          </Center>\n      </Box>\n    </>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport {\n  Tag,\n  Box,\n  Text,\n  Stack,\n  HStack,\n  // Radio,\n  ButtonGroup,\n  Center,\n  useColorMode,\n} from '@chakra-ui/react';\nimport {\n  // CheckboxContainer,\n  // CheckboxControl,\n  // CheckboxSingleControl,\n  // InputControl,\n  NumberInputControl,\n  PercentComplete,\n  // RadioGroupControl,\n  ResetButton,\n  // SelectControl,\n  SliderControl,\n  SubmitButton,\n  SwitchControl,\n  // TextareaControl,\n} from 'formik-chakra-ui';\n// import { CheckIcon, CloseIcon } from '@chakra-ui/icons';\n// import BorderBox from 'components/SharedComponents/BorderBox';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\n\n\nconst initialValues = {\n  lowerValue: 0,\n  upperValue: 1,\n  stateCounty: false, //state = false county = true\n  risk: 0,\n  bar: '',\n};\n\nconst validationSchema = Yup.object({\n  lowerValue: Yup.number().required().min(0),\n  upperValue: Yup.number().moreThan(\n    Yup.ref('lowerValue'),\n    'Upper Limit must be bigger than Lower Limit'\n  ).required(),\n  stateCounty: Yup.boolean(),\n  risk: Yup.number().required(),\n  bar: Yup.string(),\n});\n\nconst Form = ({ onClose, onSubmit }) => {\n  const { colorMode, toggleColorMode } = useColorMode();\n  function ColorChoose() {\n    if (colorMode === 'light') {\n      return 'g_start';\n    } else {\n      return 'g_end';\n    }\n  }\n\n  const riskColor = e => {\n    if (e <= 33) {\n      return 'green.300';\n    } else if (33 < e && e < 66) {\n      return 'yellow.300';\n    } else {\n      return 'red.400';\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validationSchema={validationSchema}\n    >\n      {({ handleSubmit, values, errors }) => (\n        <Box\n          borderWidth=\"1px\"\n          rounded=\"lg\"\n          borderColor={ColorChoose}\n          p={5}\n          as=\"form\"\n          onSubmit={handleSubmit}\n        >\n          <Text mt={4}> Real Estate Prices</Text>\n          <Stack px={5} direction={['column', 'row', 'row']} align=\"center\">\n            <NumberInputControl name=\"lowerValue\" label=\"Lower Limit ($)\" />\n            <Text> to </Text>\n            <NumberInputControl name=\"upperValue\" label=\"Upper Limit ($)\" />\n          </Stack>\n\n          <Box my={5}>\n            <HStack my={2}>\n              <Text>How much risk are you willing to take?*</Text>\n              <Tag bg={riskColor(values.risk)}>\n                <Text fontWeight=\"bold\">{values.risk} %</Text>{' '}\n              </Tag>\n            </HStack>\n            <HStack mx={5}>\n              <Text color=\"green\">0%</Text>\n              <SliderControl name=\"risk\" />\n              <Text color=\"red\">100%</Text>\n            </HStack>\n          </Box>\n\n          <Box my={5}>\n            <HStack>\n            <Text>State</Text>\n            <SwitchControl name=\"stateCounty\"/>\n            <Text>County</Text>\n            </HStack>\n          </Box>\n\n          <PercentComplete />\n          <Center>\n            <ButtonGroup>\n              {/* <SubmitButton bg=\"g_start\" onClick={onClose}> */}\n              <SubmitButton bg=\"g_start\">\n                Submit\n              </SubmitButton>\n              <ResetButton>Reset</ResetButton>\n            </ButtonGroup>\n          </Center>\n\n          <Box as=\"pre\" marginY={10}>\n            {JSON.stringify(values, null, 2)}\n            <br />\n            {JSON.stringify(errors, null, 2)}\n          </Box>\n        </Box>\n      )}\n    </Formik>\n  );\n};\n\nexport default Form;","import React from \"react\";\nimport { Box, useColorMode } from \"@chakra-ui/react\";\n\nconst BorderBox = ({ children }) => {\n  const { colorMode, toggleColorMode } = useColorMode();\n  function ColorChoose() {\n    if (colorMode === \"light\") {\n      return \"g_start\";\n    } else {\n      return \"g_end\";\n    }\n  }\n  return (\n    <>\n      <Box\n        border=\"2px\"\n        my= {4}\n        mx= {4}\n        borderRadius=\"12px\"\n        px={[3, null, 6]}\n        py={[3, null, 6]}\n        borderColor={ColorChoose}\n        boxShadow=\"inner\"\n      >\n        {children}\n      </Box>\n    </>\n  );\n};\n\nexport default BorderBox;","import React from 'react'\nimport { Box, Heading, Divider, Text } from '@chakra-ui/react'\nimport BorderBox from 'components/SharedComponents/BorderBox'\n\nconst Banner = () => {\n    return (\n        <>\n        <Box p={5} align=\"center\">\n            <BorderBox>\n                <Heading p={2} >Hello! Welcome to mapM</Heading>\n                <Divider />\n                <Text p={2}>Your one stop shop to find the best location to live in with your requirements</Text>\n            </BorderBox>\n        </Box>\n        </>\n    )\n}\n\nexport default Banner\n","import React, { useState, useEffect } from \"react\";\n\nconst useGeoLocation = () => {\n    const [location, setLocation] = useState({\n        loaded: false,\n        coordinates: { lat: \"\", lng: \"\" },\n    });\n\n    const onSuccess = (location) => {\n        setLocation({\n            loaded: true,\n            coordinates: {\n                lat: location.coords.latitude,\n                lng: location.coords.longitude,\n            },\n        });\n    };\n\n    const onError = (error) => {\n        setLocation({\n            loaded: true,\n            error: {\n                code: error.code,\n                message: error.message,\n            },\n        });\n    };\n\n    useEffect(() => {\n        if (!(\"geolocation\" in navigator)) {\n            onError({\n                code: 0,\n                message: \"Geolocation not supported\",\n            });\n        }\n        // navigator.geolocation.getCurrentPosition(onSuccess, onError, {enableHighAccuracy: true, maximumAge: 10000});\n        navigator.geolocation.getCurrentPosition(onSuccess, onError);\n    }, []);\n\n    return location;\n};\n\nexport default useGeoLocation;","const popupContent = {\n  textAlign: \"center\",\n  height: \"350px\",\n  marginTop: \"30px\"\n};\nconst popupHead = {\n  fontWeight: \"bold\",\n  fontSize: \"22px\"\n};\n\nconst popupText = {\n  fontSize: \"15px\",\n  marginBottom: \"20px\"\n};\n\nconst okText = {\n  fontSize: \"15px\"\n};\n\nexport { popupContent, popupHead, popupText, okText };","import React, { useState, useEffect } from 'react';\nimport {\n  MapContainer,\n  TileLayer,\n  Marker,\n  GeoJSON,\n  Popup,\n  LayersControl,\n} from 'react-leaflet';\nimport { Spinner, Box, useColorMode } from '@chakra-ui/react';\nimport BorderBox from 'components/SharedComponents/BorderBox';\nimport 'components/Map/myLeaflet.css';\nimport useGeoLocation from 'components/Hooks/useGeoLocation';\n// import counties from '../data/us-county-boundaries.json'\nimport states from '../../data/states.json';\nimport states_loc from '../../data/state_loc.json';\nimport { popupContent, popupHead, popupText, okText } from './popupStyles';\n\nimport L from 'leaflet';\n\nconst stateDict = {\n  AL: 'Alabama',\n  AK: 'Alaska',\n  AZ: 'Arizona',\n  AR: 'Arkansas',\n  CA: 'California',\n  CO: 'Colorado',\n  CT: 'Connecticut',\n  DE: 'Delaware',\n  FL: 'Florida',\n  GA: 'Georgia',\n  HI: 'Hawaii',\n  ID: 'Idaho',\n  IL: 'Illinois',\n  IN: 'Indiana',\n  IA: 'Iowa',\n  KS: 'Kansas',\n  KY: 'Kentucky',\n  LA: 'Louisiana',\n  ME: 'Maine',\n  MD: 'Maryland',\n  MA: 'Massachusetts',\n  MI: 'Michigan',\n  MN: 'Minnesota',\n  MS: 'Mississippi',\n  MO: 'Missouri',\n  MT: 'Montana',\n  NE: 'Nebraska',\n  NV: 'Nevada',\n  NH: 'New Hampshire',\n  NJ: 'New Jersey',\n  NM: 'New Mexico',\n  NY: 'New York',\n  NC: 'North Carolina',\n  ND: 'North Dakota',\n  OH: 'Ohio',\n  OK: 'Oklahoma',\n  OR: 'Oregon',\n  PA: 'Pennsylvania',\n  RI: 'Rhode Island',\n  SC: 'South Carolina',\n  SD: 'South Dakota',\n  TN: 'Tennessee',\n  TX: 'Texas',\n  UT: 'Utah',\n  VT: 'Vermont',\n  VA: 'Virginia',\n  WA: 'Washington',\n  WV: 'West Virginia',\n  WI: 'Wisconsin',\n  WY: 'Wyoming',\n};\n\nfunction MyMapState(props) {\n  const userLocation = useGeoLocation();\n  const position = [\n    Number(userLocation.coordinates['lat']),\n    Number(userLocation.coordinates['lng']),\n  ];\n\n  const onEachState = (state, layer) => {\n    const name = state.properties.NAME;\n    const confirmedText = state.properties.LSAD;\n    layer.bindPopup(`${name} ${confirmedText}`);\n    // for (let i = 0; i < props.points.length; i++) {\n    //   if (stateDict[props.points[i]['state']] === state.properties.NAME) {\n    //     console.log('hi');\n    //     layer.setStyle({ color: 'red' });\n    //   }\n    // }\n    // layer.bindPopup(`${name} ${confirmedText}`, {{ fillcolor: colorMatch(state) }});\n  };\n\n  return (\n    <Box>\n      <BorderBox>\n        <MapContainer\n          center={[35.3, -120.65]}\n          zoom={13}\n          scrollWheelZoom={true}\n          height={300}\n        >\n          <GeoJSON\n            attribution=\"states data\"\n            data={states}\n            onEachFeature={onEachState}\n            addTo=\"OpenStreetMap.Mapnik\"\n          />\n          <LayersControl position=\"topright\">\n            <LayersControl.BaseLayer checked name=\"OpenStreetMap.Mapnik\">\n              <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n              />\n            </LayersControl.BaseLayer>\n            <LayersControl.BaseLayer name=\"OpenStreetMap.BlackAndWhite\">\n              <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\"\n              />\n            </LayersControl.BaseLayer>\n            <LayersControl.BaseLayer name=\"Stadia Maps\">\n              <TileLayer\n                attribution='&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a> contributors'\n                url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n              />\n            </LayersControl.BaseLayer>\n\n            <Marker position={position}>\n              <Popup>Where you are right now!</Popup>\n            </Marker>\n\n            {props.points.map(point => {\n              return (\n                <Marker\n                  key={Math.random()}\n                  position={states_loc[point['state']]}\n                >\n                  <Popup className=\"request-popup\">\n                    <div style={popupContent}>\n                      <div className=\"m-2\" style={popupHead}>\n                        State code : {point['state']}\n                      </div>\n                      <span style={popupText}>\n                        This area would be a great fit for your requirements\n                      </span>\n                      <br />\n                      <span style={popupText}>\n                        <b>Covid Status :</b>\n                      </span>\n                      <div className=\"m-2\" style={okText}>\n                       number of confirmed cases {point['total_vaccinations']} \n                      </div>\n                      <div className=\"m-2\" style={okText}>\n                        <b>Overall risk assessment </b>: {point['risk'].toPrecision(3)}\n                      </div>\n                    </div>\n                  </Popup>\n                </Marker>\n              );\n            })}\n          </LayersControl>\n        </MapContainer>\n      </BorderBox>\n    </Box>\n  );\n}\n\nexport default MyMapState;\n","import React, { useState, useEffect } from 'react';\nimport {\n  MapContainer,\n  TileLayer,\n  Marker,\n  GeoJSON,\n  Popup,\n  LayersControl,\n} from 'react-leaflet';\nimport { Spinner, Box, useColorMode } from '@chakra-ui/react';\nimport BorderBox from 'components/SharedComponents/BorderBox';\nimport 'components/Map/myLeaflet.css';\nimport useGeoLocation from 'components/Hooks/useGeoLocation';\nimport counties from '../../data/counties.json';\nimport counties_loc from '../../data/counties_loc.json';\nimport { popupContent, popupHead, popupText, okText } from './popupStyles';\n\nfunction MyMapCounty(props) {\n  const userLocation = useGeoLocation();\n  const position = [\n    Number(userLocation.coordinates['lat']),\n    Number(userLocation.coordinates['lng']),\n  ];\n\n  // const { colorMode, toggleColorMode } = useColorMode();\n  const onEachCounty = (county, layer) => {\n    // layer.options.fillColor = colorMatch(county);\n    const name = county.properties.NAME;\n    const confirmedText = county.properties.LSAD;\n    layer.bindPopup(`${name} ${confirmedText}`);\n  };\n\n  // const getAbbreviation = word => {\n  //   const fullName = word.split(' ');\n  //   const initials = fullName.shift().charAt(0) + fullName.pop().charAt(0);\n  //   return initials.toUpperCase();\n  // };\n\n  return (\n    <Box>\n      <BorderBox>\n        <MapContainer\n          center={[35.3, -120.65]}\n          zoom={13}\n          scrollWheelZoom={true}\n          height={300}\n        >\n          <LayersControl position=\"topright\">\n            <GeoJSON\n              attribution=\"county data\"\n              data={counties}\n              onEachFeature={onEachCounty}\n            />\n            <LayersControl.BaseLayer checked name=\"OpenStreetMap.Mapnik\">\n              <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n              />\n            </LayersControl.BaseLayer>\n            <LayersControl.BaseLayer name=\"OpenStreetMap.BlackAndWhite\">\n              <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\"\n              />\n              <GeoJSON\n                attribution=\"county data\"\n                data={counties}\n                onEachFeature={onEachCounty}\n              />\n            </LayersControl.BaseLayer>\n            <LayersControl.BaseLayer name=\"Stadia Maps\">\n              <TileLayer\n                attribution='&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a> contributors'\n                url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n              />\n            </LayersControl.BaseLayer>\n\n            <Marker position={position}>\n              <Popup>Where you are right now!</Popup>\n            </Marker>\n\n            {props.points.map(point => {\n              console.log(point['id']);\n              return (\n                <Marker\n                  key={Math.random()}\n                  // position={counties_loc[point['id']]}\n                  position={[point['lat'], point['lng']]}\n                >\n                  <Popup className=\"request-popup\">\n                    <div style={popupContent}>\n                      <div className=\"m-2\" style={popupHead}>\n                        County code : {point['state']}\n                      </div>\n                      <span style={popupText}>\n                        This area would be a great fit for your requirements\n                      </span>\n                      <br />\n                      <span style={popupText}>\n                        <b>Covid Status here :</b>\n                      </span>\n                      <div className=\"m-2\" style={okText}>\n                        number of confirmed cases {point['total_vaccinations']}\n                      </div>\n                      <div className=\"m-2\" style={okText}>\n                        <b>Overall risk assessment </b>:{' '}\n                        {point['risk'].toPrecision(3)}\n                      </div>\n                    </div>\n                  </Popup>\n                </Marker>\n              );\n            })}\n          </LayersControl>\n        </MapContainer>\n      </BorderBox>\n    </Box>\n  );\n}\n\nexport default MyMapCounty;\n\n// function getUserLocation() {\n//   // if (userLocation !== undefined || JSON.stringify(userLocation) !== '{}') {\n//   let position = [0, 0];\n//   // if (userLocation.loaded === true && userLocation.coordinates !== null) {\n//   if (JSON.stringify(userLocation) !== '{}') {\n//       position = [Number(userLocation.coordinates['lat']), Number(userLocation.coordinates['lng'])];\n//       // position[1] = Number(userLocation.coordinates['lng']);\n//   }\n//   else {\n//     position = [51.505, -0.09];\n//   }\n//   return position;\n// }\n","import React, { useState, useEffect } from 'react';\nimport { Heading, Box, Button, Center, useDisclosure } from '@chakra-ui/react';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n} from '@chakra-ui/react';\nimport Form from 'components/Home/Form';\nimport Banner from 'components/Home/Banner';\nimport MyMapState from 'components/Map/MyMapState';\nimport MyMapCounty from 'components/Map/MyMapCounty';\nimport axios from 'axios';\n\nconst Home = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n  const [formData, setFormData] = useState({\n    lowerValue: 0,\n    upperValue: 1,\n    stateCounty: false, //state = false county = true\n    risk: 0,\n    bar: '',\n  });\n  const [points, setPoints] = useState({});\n  const [ready, setReady] = useState(false);\n\n  useEffect(() => {\n    const makeAPIMagicCall = () => {\n      let type_d;\n      if (formData['stateCounty'] === true) {\n        // counties\n        type_d = 1;\n      } else {\n        // states\n        type_d = 0;\n      }\n\n      const lower = formData['lowerValue'];\n      const upper = formData['upperValue'];\n      const risk = formData['risk'];\n\n      axios\n        .get(\n          `http://3.136.236.189:8080/risk?range=${lower},${upper}&level=${type_d}&risk=${risk}`\n        )\n        .then(res => {\n          const p = res.data;\n          setPoints(p);\n          return res.statuscode === 200;\n        })\n        .catch(error => {\n          console.log(error.response);\n        });\n    };\n    makeAPIMagicCall();\n  }, [formData]);\n\n\n  const onSubmit_Form = async (values, { setStatus, resetForm }) => {\n    sleep(100).then(() => {\n      // window.alert(JSON.stringify(values, null, 2));\n      // setFormData(JSON.stringify(values, null, 2));\n      if (values !== {}) {\n        setFormData(values);\n        setReady(true);\n      }\n    });\n  };\n\n  return (\n    <>\n      <Box>\n        <Banner />\n        <Center>\n          <Button bg=\"g_start\" align=\"center\" color=\"white\"  onClick={onOpen} m={5} >\n            Click me!\n          </Button>\n          <Modal isOpen={isOpen} onClose={onClose}>\n            <ModalOverlay />\n            <ModalContent maxW=\"50rem\">\n              <ModalHeader>\n                <Heading align=\"center\">Filters</Heading>\n              </ModalHeader>\n              <ModalCloseButton />\n              <ModalBody>\n                <Form onClose={onClose} onSubmit={onSubmit_Form} />\n              </ModalBody>\n            </ModalContent>\n          </Modal>\n        </Center>\n        {ready === true && (formData['stateCounty'] === true ? (\n          <MyMapCounty points={points} />\n        ) : (\n          <MyMapState points={points} />\n        ))}\n      </Box>\n    </>\n  );\n};\n\nexport default Home;\n","import { extendTheme } from \"@chakra-ui/react\"\n\nconst theme = extendTheme({\n  fonts: {\n    heading: \"Open Sans\",\n    body: \"Raleway\",\n  },\n  colors: {\n      g_start: \"#0bab64\",\n      g_end: \"#3bb78f\"\n  }\n})\n\nexport default theme","import React from 'react';\nimport {\n  ChakraProvider,\n  Box,\n} from '@chakra-ui/react';\nimport Nav  from 'components/SharedComponents/Nav.js';\nimport Footer from 'components/SharedComponents/Footer.js';\nimport Home from 'components/Home/Home';\nimport { BrowserRouter as Router, Switch, Route, } from 'react-router-dom'\n\nimport theme from './theme.js'\nimport \"@fontsource/raleway/400.css\"\nimport \"@fontsource/open-sans/700.css\"\n\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      {/* <head><link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.2.0/dist/leaflet.css\" />\n<script src=\"https://unpkg.com/leaflet@1.2.0/dist/leaflet.js\"></script></head> */}\n      <Router basename={process.env.PUBLIC_URL}>\n        <Box>\n        <Nav />\n        <Switch>\n          {/* <Route exact path=\"/featured\" component={Featured} /> */}\n          {/* <Route exact path=\"/about\" component={About} /> */}\n          <Route exact path=\"/\" component={Home} />\n        </Switch>\n        <Footer />\n        </Box>\n      </Router>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n\n  //  {/* <Box textAlign=\"center\" fontSize=\"xl\">\n  //       <Grid minH=\"100vh\" p={3}>\n  //         <ColorModeSwitcher justifySelf=\"flex-end\" />\n  //         <VStack spacing={8}>\n  //           <Logo h=\"40vmin\" pointerEvents=\"none\" />\n  //           <Text>\n  //             Edit <Code fontSize=\"xl\">src/App.js</Code> and save to reload.\n  //           </Text>\n  //           <Link\n  //             color=\"teal.500\"\n  //             href=\"https://chakra-ui.com\"\n  //             fontSize=\"2xl\"\n  //             target=\"_blank\"\n  //             rel=\"noopener noreferrer\"\n  //           >\n  //             Learn Chakra\n  //           </Link>\n  //         </VStack>\n  //       </Grid>\n  //     </Box> */}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}